name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Compile to executable
        run: pyinstaller --onefile overlay.py
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: |
            dist/overlay.exe
            db/

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Compile to executable
        run: pyinstaller --onefile overlay.py
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-executable
          path: |
            dist/overlay
            db/

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: windows-executable

      - name: Download Linux executable
        uses: actions/download-artifact@v4
        with:
          name: linux-executable

      - name: Determine new version
        id: new_version
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          echo "Latest tag: $latest_tag"
          latest_tag=${latest_tag#v}  # Remove leading 'v' if present
          if [[ ! $latest_tag =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            latest_tag="0.0.0"
          fi
          IFS='.' read -r -a version_parts <<< "$latest_tag"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          case "${{ inputs.version_type }}" in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="$major.$((minor + 1)).0"
              ;;
            patch)
              new_version="$major.$minor.$((patch + 1))"
              ;;
          esac
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_ENV

      - name: Zip Windows files
        run: zip -j overlay-windows.zip dist/overlay.exe && zip -r overlay-windows.zip db/data.json db/dict

      - name: Tar and gzip Linux files
        run: tar -czvf overlay-linux.tar.gz -C dist overlay -C .. db/data.json db/dict

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          files: |
            overlay-windows.zip
            overlay-linux.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
